20210406
A. LIST 구조 만들기

1. createList : 리스트 초기화해서 처음 생성하는 함수

2.destroyList : List의 모든 동적 메모리를 해제하는 함수 -- 추후 Name구조가 어떻게 할당되는지 등에 따라
바뀔 예정!!!!!
(0406) : 일단은 현재 리스트에만 할당된 메모리를 해제하도록 하겠음.

3.createName : 새로운 tName을 받아온 데이터로 형성

4.destroyName : 일단은 tName 자체만 해제 --추후 변경 가능!!

5. _insert DLL의 기본 삽입 연산

- 가장 처음 삽입하는 경우
: pList의 head가 NULL임
-head를 바꾸는 경우
pPre가 NULL
-중간
평범한 경우
-가장 끝 
pPre->rlink가 NULL ???== (pPre == pList->rear)아닌가

+++ pList->count+=1도 넣어주었다!!!
+++ 의문점 : memory overflow는 뭐지?

6. _delete DLL의 기본 삭제 연산
-삭제한 데이터 받아오기 : strdup사용하기 +free는 언제하지?!!!
-없는 것을 삭제할 경우! : 자동으로 _search에서 아마 걸러질 것

-head를 삭제할 경우
-중간 삭제
-rear을 삭제할 경우

+++ pList의 count를 하나 줄여줌


7. _search DLL의 기본 탐색 연산

20210410
0. searchList함수
리스트를 서치한다.

-_search 변경 (아래 코드는 옛날버전)
NODE* iterator = pList->head;
	for (int i = 0; i < pList->count; i++) {
		//not found : 0
		if (iterator == NULL) return 0;
		//found : 1 
		else if (strcmp(((tName*)(iterator->dataPtr))->name, (char*)pArgu) == 0) {//dataPtr 역참조하기!
			*pPre = iterator->llink;
			*pLoc = iterator;
			return 1;
		}
		//계속해서 탐색.
		else iterator = iterator->llink;
	}

1. addNode 함수
데이터를 받아서 리스트를 확인하고 새로 넣거나 복사











